{
  "compilerOptions": {
    /* ECMAScript 대상 버전 지정: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "target": "es5",
    /* 모듈 코드 생성 방식: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    "module": "esnext",
    /* 컴파일에 포함될 라이브러리 파일 목록 */
    /* lib 옵션 설정시 그 라이브러리 파일만 포함된다. */
    /* target ES5 -> DOM,ES5,ScriptHost */
    /* target ES6 -> DOM,ES6,DOM.Iterable,ScriptHost */
    "lib": [
      "es5",
      "es6",
      "es7",
      "es2017",
      "dom",
      "dom.iterable"
    ],
    /* .tsx 파일에서 JSX 지원: 'preserve', 'react-native', or 'react'. */
    "jsx": "react",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    /* 런타임 시 결합된 컨텐츠가 프로젝트의 구조를 나타내는 루트 폴더 목록 */
    "rootDirs": [
      "src",
      "stories"
    ],
    /* 오류가 보고된 경우 출력을 내보내지 않습니다. */
    "noEmitOnError": true,
    /* js 파일을 ts 파일에서 import 해서 사용 가능 / JavaScript 파일의 컴파일을 허용 */
    "allowJs": true,
    /* js 파일에서도 에러체크 여부 / .js 파일에 오류를 보고합니다. --allowJs와 함께 사용*/
    "checkJs": false,
    /* 컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일) */
    "declaration": true,
    /* 해당하는 '.d.ts'파일 각각에 대한 소스 맵을 생성합니다. */
    "declarationMap": true,
    /* 	해당하는 .map 파일을 생성합니다. */
    "sourceMap": true,
    /* 모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능) */
    // "outFile": "./",
    /* 출력 구조를 디렉토리로 리다이렉트합니다. */
    "outDir": "build/lib",
    /* 추가 검사를 수행하여 별도의 컴파일 (예를 들어 트랜스파일된 모듈 혹은 @babel/plugin-transform-typescript) 이 안전한지 확인합니다. */
    "isolatedModules": true,
    /* 모든 엄격한 타입 검사 옵션을 활성화합니다. */
    "strict": false,
    /* any타입 금지 여부 */
    "noImplicitAny": false,
    /* 엄격한 null 검사 모드에서는 null과 undefined 값이 모든 타입의 도메인에 있지 않고 그 자체와 any만 할당할 수 있습니다(한 가지 예외사항은 undefined 또한 void에 할당 가능하다는 것입니다). */
    "strictNullChecks": true,
    /* 인덱스 시그니처가 없는 객체를 인덱싱하는 경우 --noImplicitAny 억제합니다. */
    "suppressImplicitAnyIndexErrors": true,
    /* any 타입으로 암시한 this 표현식에 오류를 보고합니다. */
    "noImplicitThis": true,
    /* strict mode에서 파싱하고 각 소스 파일에 대해 "use strict"를 내보냅니다. */
    /* "alwaysStrict": true, */
    /* 사용하지 않는 지역 변수에 대한 오류를 보고합니다. */
    "noUnusedLocals": false,
    /* 함수의 모든 코드 경로에 반환값이 없을 때 오류를 보고합니다. */
    "noImplicitReturns": false,
    /* 모듈 해석 방식 = 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "moduleResolution": "node",
    /* 타입 정의가 포함될 폴더의 목록 */
    "typeRoots": [
      "src/@types/",
      "node_modules/@types/"
    ],
    /* default export가 없는 모듈에서 default imports를 허용합니다. 코드 방출에는 영향을 주지 않으며, 타입 검사만 수행합니다. */
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    /* .json 확장자로 import된 모듈을 포함합니다.*/
    "resolveJsonModule": true,
    /* ES 데코레이터에 대한 실험적인 지원을 사용하도록 활성화합니다. */
    "experimentalDecorators": true,
    /* 소스에 데코레이터 선언에 대한 설계-타입 메타 데이터를 내보냅니다. */
    "emitDecoratorMetadata": true,
    /* 모든 선언 파일(*.d.ts)의 타입 검사를 건너뜁니다. */
    "skipLibCheck": true,
    /* 동일 파일 참조에 대해 일관성 없는 대소문자를 비활성화합니다. */
    "forceConsistentCasingInFileNames": false
  },
  "compileOnSave": true,
  "include": [
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "dist",
    "build",
    "node_modules",
    "scripts",
    "jest",
  ]
}
